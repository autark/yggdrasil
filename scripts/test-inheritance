#!/usr/bin/perl -l

use strict;
use warnings;

use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Yggdrasil;

my ($user, $password, $host, $port, $db, $engine, $mapper) =
  ($ENV{YGG_USER}, $ENV{YGG_PASSWORD}, $ENV{YGG_HOST}, $ENV{YGG_PORT}, $ENV{YGG_DB}, $ENV{YGG_ENGINE}, undef);

GetOptions(
	   "user=s"       => \$user,
	   "engine=s"     => \$engine,
	   "password=s"   => \$password,
	   "host=s"       => \$host,
	   "database=s"   => \$db,
	   "engine=s"     => \$engine,
	   "port=s"       => \$port,
	   "mapper=s"     => \$mapper,
	  );

new Yggdrasil(
	      user      => $user,
	      password  => $password,
	      host      => $host,
	      port      => $port,
	      db        => $db,
	      engine    => $engine,
	      namespace => 'Ygg',
	      mapper    => $mapper,
	      admin     => 1,
	     );

print "$user\@$host ($db / $engine)\n";

my $person  = define Yggdrasil::Entity "Person";
my $student = define Yggdrasil::Entity "Student";

my $p_name = define $person 'name';
my $s_name = define $student 'name';

my $p_iq  = define $person 'iq', type => "INTEGER";

my $p_age = define $person 'age', type => "INTEGER";

my $s_loan = define $student 'loan', type => "FLOAT";

my $bob   = Ygg::Student->new( "bob" );
my $alice = Ygg::Person->new( "alice" );

$bob->property( name => "Bob b." );
$alice->property( name => "Alice down the Hole" );

$alice->property( age => 16 );

$bob->property( loan => 1_000_000 );

$student = define Yggdrasil::Entity "Student", inherit => "Person";

print "Student inherits from Person";
print "Properties: ", join( ", ", $bob->properties() );
pprop( $bob, "name");
pprop( $bob, "age");
pprop( $bob, "loan");
print "Type of iq: ", $bob->type("iq");

$bob->property( age => 33 );

pprop( $bob, "age");

my $ssn = define $person 'ssn', type => "INTEGER";

$bob->property( ssn => 123456789 );

pprop( $bob, "ssn");

$student = define Yggdrasil::Entity "Student";

print "Student does not inhert from Person";
print "Properties: ", join( ", ", $bob->properties() );
pprop( $bob, "name");
pprop( $bob, "loan");
pprop( $bob, "age");
pprop( $bob, "ssn");
print "Type of iq: ", $bob->type("iq");

print "-" x 79;

my $A = define Yggdrasil::Entity "A";
define $A "a_1";
define $A "a_2";

my $B = define Yggdrasil::Entity "B", inherit => "A";
define $B "b_1";

my $D = define Yggdrasil::Entity "D";
define $D "d_1";
define $D "d_2";

my $E = define Yggdrasil::Entity "E", inherit => "D";
define $E "e_1";


print "Properties for A: ", join(", ", $A->properties() );
print "Properties for B: ", join(", ", $B->properties() );
print "Properties for D: ", join(", ", $D->properties() );
print "Properties for E: ", join(", ", $E->properties() );

print "Introduce C as inheriting from B and redefine D to inherit from new C";

my $C = define Yggdrasil::Entity "C", inherit => "B";
define $C "c_1";

define Yggdrasil::Entity "D", inherit => "C";

print "Properties for A: ", join(", ", $A->properties() );
print "Properties for B: ", join(", ", $B->properties() );
print "Properties for C: ", join(", ", $C->properties() );
print "Properties for D: ", join(", ", $D->properties() );
print "Properties for E: ", join(", ", $E->properties() );
print "C inherits from: ", join(", ", $C->isa() );
print "C->isa(A): ", $C->isa($A);
print "C->isa(B): ", $C->isa($B);
print "C->isa(C): ", $C->isa($C);
print "C->isa(D): ", $C->isa($D);
print "C->isa(E): ", $C->isa($E);

print "redefine C as not inheriting";
define Yggdrasil::Entity "C";


print "Properties for A: ", join(", ", $A->properties() );
print "Properties for B: ", join(", ", $B->properties() );
print "Properties for C: ", join(", ", $C->properties() );
print "Properties for D: ", join(", ", $D->properties() );
print "Properties for E: ", join(", ", $E->properties() );
print "C inherits from: ", join(", ", $C->isa() );
print "C->isa(A): ", $C->isa($A);
print "C->isa(B): ", $C->isa($B);
print "C->isa(C): ", $C->isa($C);
print "C->isa(D): ", $C->isa($D);
print "C->isa(E): ", $C->isa($E);



sub pprop {
    my $instance = shift;
    my $property = shift;

    my $value = $instance->property($property);
    print $instance->id(), ".", $property, ": ", defined $value ? $value : "NULL";
}
