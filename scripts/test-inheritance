#!/usr/bin/perl -l

use strict;
use warnings;

use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Yggdrasil;

my ($user, $password, $host, $port, $db, $engine, $mapper) =
  ($ENV{YGG_USER}, $ENV{YGG_PASSWORD}, $ENV{YGG_HOST}, $ENV{YGG_PORT}, $ENV{YGG_DB}, $ENV{YGG_ENGINE}, undef);

GetOptions(
	   "user=s"       => \$user,
	   "engine=s"     => \$engine,
	   "password=s"   => \$password,
	   "host=s"       => \$host,
	   "database=s"   => \$db,
	   "engine=s"     => \$engine,
	   "port=s"       => \$port,
	   "mapper=s"     => \$mapper,
	  );

new Yggdrasil(
	      user      => $user,
	      password  => $password,
	      host      => $host,
	      port      => $port,
	      db        => $db,
	      engine    => $engine,
	      namespace => 'Ygg',
	      mapper    => $mapper,
	      admin     => 1,
	     );

print "$user\@$host ($db / $engine)\n";

my $person  = define Yggdrasil::Entity "Person";
my $student = define Yggdrasil::Entity "Student";

my $p_name = define $person 'name';
my $s_name = define $student 'name';

my $p_age = define $person 'age', type => "INTEGER";

my $s_loan = define $student 'loan', type => "FLOAT";

my $bob   = Ygg::Student->new( "bob" );
my $alice = Ygg::Person->new( "alice" );

$bob->property( name => "Bob b." );
$alice->property( name => "Alice down the Hole" );

$alice->property( age => 16 );

$bob->property( loan => 1_000_000 );

$student = define Yggdrasil::Entity "Student", inherit => "Person";

print "Student inherits from Person";
pprop( $bob, "name");
pprop( $bob, "age");
pprop( $bob, "loan");

$bob->property( age => 33 );

pprop( $bob, "age");

my $ssn = define $person 'ssn', type => "INTEGER";

$bob->property( ssn => 123456789 );

pprop( $bob, "ssn");

$student = define Yggdrasil::Entity "Student";

print "Student does not inhert from Person";
pprop( $bob, "name");
pprop( $bob, "loan");
pprop( $bob, "age");
pprop( $bob, "ssn");


sub pprop {
    my $instance = shift;
    my $property = shift;

    my $value = $instance->property($property);
    print $instance->id(), ".", $property, ": ", defined $value ? $value : "NULL";
}
