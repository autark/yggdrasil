#!/usr/bin/perl

use strict;
use warnings;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Yggdrasil;

new Yggdrasil(
	      user      => $ENV{YGG_USER},
	      password  => $ENV{YGG_PASSWORD},
	      host      => $ENV{YGG_HOST},
	      port      => $ENV{YGG_PORT},
	      db        => $ENV{YGG_DB},
	      engine    => $ENV{YGG_ENGINE},
	      namespace => 'Ygg',
	     );


# --- Define Hosts
my $host = define Yggdrasil::Entity 'Host';
my $ip = define $host 'ip', 'type' => 'text';
my $blob = define $host 'blobbie', 'type' => 'binary';
my $serial = define $host 'serial';

my $nommo  = Ygg::Host->new( 'nommo' );
my $baal   = Ygg::Host->new( 'baal' );
my $escher = Ygg::Host->new( 'escher' );
$nommo->property( 'ip' , 'n1' );
$nommo->property( 'ip' , 'n2' );
$nommo->property( 'ip' , 'n3' );

#sleep 2;
#$nommo->property( 'ip' , 'n1' );
$nommo->property( 'serial', 'nserial');

$baal->property( 'ip' , 'b1' );
$baal->property( 'ip' , 'b2' );
$baal->property( 'serial', 'bserial');

$escher->property( 'serial', 'eserial');
$escher->property( 'ip', 'e1');

$nommo = Ygg::Host->get( 'nommo' );
print "------>>>> $nommo->{_id}\n";

# --- Define Rooms
my $room = define Yggdrasil::Entity 'Room';
define Ygg::Room 'use', type => 'Text';

my $b810 = Ygg::Room->new( 'B810' );
$b810->property( "use", "Terminal room" );

my $b701 = $room->new( "B701" );
$b701->property( "use", "Hang-out" );


# --- Define Persons
my $person = define Yggdrasil::Entity "Person";
define $person "name";
define $person "position";
define $person "department";

my $terje = $person->new( "terjekv" );
$terje->property( name => "Terje Kvernes" );
my $bard  = $person->new( "bard" );
$bard->property( name => "Bård" );



# --- Define Phones
my $phone = define Yggdrasil::Entity "Telephone";
my $ophone = $phone->new( "22 85 54 02" );


# --- Define contractor
my $con = define Yggdrasil::Entity "Contractor";
my $bravida = $con->new( "Bravida" );


# --- Define Relations
# room<->phone
# host<->room
# person<->host

define Yggdrasil::Relation $host, 'Room';
define Yggdrasil::Relation $room, $phone;
define Yggdrasil::Relation $person, $host;
define Yggdrasil::Relation $phone, $con;

define Yggdrasil::Relation $person, $phone;

$b810->link( $nommo );
$nommo->unlink( $b810 );

$terje->link( $nommo );
$bard->link( $baal );

$nommo->link( $b701 );
$b701->link( $baal );

$b701->link( $ophone );

$bravida->link( $ophone );
$terje->link( $ophone );

for my $e (qw /Telephone Contractor Room/ ) {
  my @res = $terje->fetch_related( $e );

  if (@res) {
    for my $p ( @res ) {
      print "ZOOM * ", $terje->id(), " has $e ", $p->id(), " in ", $p->pathlength(), " steps.\n";

      my @res2 = $p->fetch_related( $person );

      if( @res2 ) {
	for my $p2 ( @res2 ) {
	  print "ZOOM * ", $p->id(), " has Person ", $p2->id(), "\n";
	  
	}
      } else {
	print "ZOOM * ", $p->id(), " is not related to Person.\n";
      }
    }
  } else {
    print "ZOOM * ", $terje->id(), " is not related to $e.\n";
  }
}

define Yggdrasil::Entity 'Person';
define Yggdrasil::Entity 'Student', 'Person';
define Yggdrasil::Entity 'Student', 'Person';


# --- Test instances representing points in time
my $dinner = define $host 'dinner';

$nommo->property( $dinner => "Kylling" );
$baal->property( $dinner => "Aspargis" );

my $sleep = 2;
sleep $sleep;

$nommo->property( $dinner => "Poterer" );

sleep $sleep;

$nommo->property( $dinner => "Mer Poteter" );

sleep $sleep;

$baal->property( $dinner => "Saus" );

my $now = time();
print "ZOOM ", "-" x 70, "\n";
for my $historic_nommo (get $host 'nommo', ($now - 20), undef) {
    print "ZOOM dinner: ", $historic_nommo->property( 'dinner' ), " -> ",  $historic_nommo->{_start}, " - ", $historic_nommo->{_stop},  "<--\n";
}




sub now {
  my @t = localtime( shift || time() );

  return sprintf( "%04d-%02d-%02d %02d:%02d:%02d",
		  $t[5]+1900, $t[4]+1, $t[3], $t[2], $t[1], $t[0] );
}
