#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../../lib);

use Yggdrasil;
use Yggdrasil::Status;

my $status = new Yggdrasil::Status;

my ($user, $password, $host, $port, $db, $engine, $mapper) =
  ($ENV{YGG_USER}, $ENV{YGG_PASSWORD}, $ENV{YGG_HOST}, $ENV{YGG_PORT}, $ENV{YGG_DB}, $ENV{YGG_ENGINE}, undef);

GetOptions(
	   "user=s"       => \$user,
	   "engine=s"     => \$engine,
	   "password=s"   => \$password,
	   "host=s"       => \$host,
	   "database=s"   => \$db,
	   "engine=s"     => \$engine,
	   "port=s"       => \$port,
	   "mapper=s"     => \$mapper,
	  );

new Yggdrasil(
	      user      => $user,
	      password  => $password,
	      host      => $host,
	      port      => $port,
	      db        => $db,
	      engine    => $engine,
	      namespace => 'Ygg',
	      mapper    => $mapper,
	      admin     => 1,
	     );

print "$user\@$host ($db / $engine)\n";

# --- Define Hosts
my $hoste = define Yggdrasil::Entity 'Host';
status( 'Defining Host' );
my $ip = define $hoste 'ip', 'type' => 'text';
my $blob = define $hoste 'blobbie', 'type' => 'binary', null => 0;
my $serial = define $hoste 'serial';
status( 'Defining Host:serial' );

print $hoste->null( 'serial' ), " : ", $hoste->null( 'blobbie' ), "\n";
print $hoste->type( 'serial' ), " : ", $hoste->type( 'blobbie' ), "\n";

my $nommo  = Ygg::Host->new( 'nommo' );
status( 'Creating the instance nommo (Ygg::Host)' );
my $baal   = Ygg::Host->new( 'baal' );
my $escher = Ygg::Host->new( 'escher' );

$nommo->property( 'serial', 1 );
status( 'Setting nommo->serial to 1' );

$nommo->property( 'serialasda', undef );
status( 'Setting nommo->serialasda to undef' );

$nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1' );
$nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef' );
$nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1' );
$nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef' );
  
$baal->property( 'ip' , 'b1' );
$baal->property( 'ip' , 'b2' );
$baal->property( 'serial', 'bserial');

$escher->property( 'serial', 'eserial');
$escher->property( 'ip', 'e1');

$nommo = Ygg::Host->get( 'nommo' );
print "------>>>> $nommo->{_id}\n";

# --- Define Rooms
my $room = define Yggdrasil::Entity 'Room';
define Ygg::Room 'use', type => 'Text';

my $b810 = Ygg::Room->new( 'B810' );
$b810->property( "use", "Terminal room" );

my $b701 = $room->new( "B701" );
$b701->property( "use", "Hang-out" );


# --- Define Persons
my $person = define Yggdrasil::Entity "Person";
define Yggdrasil::Property $person => "name";
define $person "position";
define $person "_position";
define $person "department";
define $person "depart_ment";
define $person "password", type => "PASSWORD";
define $person "session";
define $person "change password";

my $terje = $person->new( "terjekv" );
$terje->property( name => "Terje Kvernes" );
$terje->property( password => "foo" );


my $bard  = $person->new( "bard" );
$bard->property( name => "Barkie" );
$bard->property( password => "" );
$bard->property( department => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" );


# --- Define Phones
my $phone = define Yggdrasil::Entity "Telephone";
my $ophone = $phone->new( "22 85 54 02" );


# --- Define contractor
my $con = define Yggdrasil::Entity "Contractor";
my $bravida = $con->new( "Bravida" );


# --- Define Relations
# room<->phone
# host<->room
# person<->host

my $hr = define Yggdrasil::Relation $hoste, 'Room';
define Yggdrasil::Relation $room, $phone;
define Yggdrasil::Relation $person, $hoste;
define Yggdrasil::Relation $phone, $con;

define Yggdrasil::Relation $person, $phone;

print "Host<->Room:", $hr->{label}, ":\n";

$hr->link($nommo, $b810);
$hr->unlink( $nommo, $b810 );
exit;

$nommo->unlink( $b810 );

$terje->link( $nommo );
$bard->link( $baal );

$nommo->link( $b701 );
$b701->link( $baal );

$b701->link( $ophone );

$bravida->link( $ophone );
$terje->link( $ophone );

for my $e (qw /Telephone Contractor Room/ ) {
  my @res = $terje->fetch_related( $e );

  if (@res) {
    for my $p ( @res ) {
      print "ZOOM * ", $terje->id(), " has $e ", $p->id(), " in ", $p->pathlength(), " steps.\n";

      my @res2 = $p->fetch_related( $person );

      if( @res2 ) {
	for my $p2 ( @res2 ) {
	  print "ZOOM * ", $p->id(), " has Person ", $p2->id(), "\n";
	  
	}
      } else {
	print "ZOOM * ", $p->id(), " is not related to Person.\n";
      }
    }
  } else {
    print "ZOOM * ", $terje->id(), " is not related to $e.\n";
  }
}

define Yggdrasil::Entity 'Person';
define Yggdrasil::Entity 'Student', inherit => 'Person';
define Yggdrasil::Entity 'Student', inherit => 'Person';

sub status {
    my $msg = shift;
    print "$msg: ", 
      join ", ", $status->OK()?"OK":"NOT OK", $status->status(), $status->english(), $status->message() . "\n";
}
