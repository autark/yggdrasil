#!/usr/bin/perl

use strict;
use warnings;

use Preamble qw|getopts status status_die|;

my $status;
my $opts = getopts();
my $ygg  = new Yggdrasil( debug => $opts->{debug} );

$status = $ygg->get_status() if $ygg;
status_die( "Yggdrasil", $ygg );

my $connect = $ygg->connect( %$opts );
status_die( "Connect", $connect, 1 );

my $login = $ygg->login( user => $opts->{yuser}, password => $opts->{ypass} );
status_die( "Login", $login, 1 );

# Define entities
my $host_entity   = $ygg->define_entity( 'Hoste' );
status( 'Hoste', $host_entity );

my $room_entity   = $ygg->define_entity( 'Room' );
status( 'Room', $room_entity );
my $person_entity = $ygg->define_entity( 'Person' );
status( 'Person', $person_entity );
my $p_s_entity    = $ygg->define_entity( 'Person::Student' );
status( 'Person::Student', $p_s_entity );


$host_entity   = $ygg->get_entity( 'Hoste' );
status( 'Hoste', $host_entity );

my $ipdef = $host_entity->define_property( 'ip' );
status( 'Define: Host:ip', $ipdef );
$ipdef = $host_entity->get_property( 'ipnope' );
status( 'Get: Host:ipnope', $ipdef );
$ipdef = $host_entity->get_property( 'ip' );
status( 'Get: Host:ip', $ipdef );
$ipdef = $ygg->get_property( 'ip' );
status( 'ygg->Get: ip', $ipdef );
$ipdef = $ygg->get_property( 'Hoste:ip' );
status( 'ygg->Get: Hoste:ip', $ipdef );



# Define properties, cannot be "gotten".
# my $host_property_ip      = $host_entity->define_property( 'ip' );
my $room_property_comment = $room_entity->define_property( 'comment' );
status( 'Room:comment', $room_property_comment );
my $person_property_name   = $person_entity->define_property( 'name' );
status( 'Person:name', $person_property_name );
my $p_s_property_grade    = $ygg->define_property( 'Person::Student:grade', type => 'text', null => 0);
status( 'Person::Student:grade', $p_s_property_grade );

# Create instance of P::S
my $ola = $p_s_entity->create( "Ola" );
status( 'Create Ola', $ola );
my $g = $ola->set( grade => "EPIC FAIL!" );
status( "Set:grade", $g );
$g = $ola->get( "grade" );
status( "Get:grade", $g );


# Define instance
my $nommo = $host_entity->create( 'nommo2' );
status( 'Create', $nommo );
$nommo    = $host_entity->fetch( 'nommo2' );
status( 'Fetch', $nommo );

my $ipp = $nommo->get( 'ip' );
status( 'Get:ip', $ipp );
$ipp = $nommo->set( 'ip', '129.240.222.179' );
status( 'Set:ip', $ipp );
$ipp = $nommo->set( 'ip', '129.240.222.178' );
status( 'Set:ip', $ipp );
$ipp = $nommo->set( 'ip', '129.240.222.179' );
status( 'Set:ip', $ipp );

# Define relations
my $host_room_relation   = $ygg->define_relation( $host_entity, $room_entity, label => 'hr' );
status( 'Host<->Room', $host_room_relation );
my $person_room_relation = $ygg->define_relation( $person_entity, $room_entity, label => 'pr' );
status( 'Person<->Room', $person_room_relation );

$host_room_relation = $ygg->get_relation( 'hr' );
status( 'Host<->Room (fetch)', $host_room_relation );

my $blob = $host_entity->define_property( 'blobbie', 'type' => 'binary', null => 0 );
status( 'Defining Host:blobbie', $blob );
my $ser = $host_entity->define_property( 'serial' );
status( 'Defining Host:serial', $ser );

print "S->null: ", $ser->null(), ", S->type: ", $ser->type(), ".\n";
print "B->null: ", $blob->null(), ", B->type: ", $blob->type(), ".\n";

# my $nommo  = Ygg::Host->new( 'nommo' );
my $baal   = $host_entity->create( 'baal' );
status( 'Create', $baal );
my $escher = $host_entity->create( 'escher' );
status( 'Create', $escher );

my $ns = $nommo->property( 'serial', 1 );
status( 'Setting nommo->serial to 1', $ns );

$ns = $nommo->property( 'serialasda', undef );
status( 'Setting nommo->serialasda to undef', $ns );

$ns = $nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1', $ns );
$ns = $nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef', $ns );
$ns = $nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1', $ns );
$ns = $nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef', $ns );

$ipp = $baal->property( 'ip' , 'b1' );
status( 'Setting baal->ip to b1', $ipp );

$ipp = $baal->property( 'ip' , 'b2' );
status( 'Setting baal->ip to b2', $ipp );
$ipp = $baal->property( 'serial', 'bserial');
status( 'Setting baal->serial to bserial', $ipp );

$ipp = $escher->property( 'serial', 'eserial');
status( 'Setting escher->serial to eserial', $ipp );
$ipp = $escher->property( 'ip', 'e1');
status( 'Setting escher->ip to e1', $ipp );

$nommo = $host_entity->get( 'nommo' );
status( 'Using get() as a method by mistake', $nommo );
$nommo = $host_entity->fetch( 'nommo2' );
status( 'Calling fetch() instead', $nommo );

# --- Define Rooms
my $room = $ygg->define_entity( 'Room' );
status( 'Room', $room );
my $ruse = $room->define_property( 'use', type => 'Text' );
status( 'Room:use', $ruse );

my $b810 = $room->create( 'B810' );
status( 'Creating b810 (Room)', $b810 );
my $b810use = $b810->property( "use", "Terminal room" );
status( 'Setting b810:use', $b810use );

my $b701 = $room->create( "B701" );
$b701->property( "use", "Hang-out" );

# --- Define Persons
my $person = $ygg->define_entity( "Person" );
status( 'Defining person', $person );

my $prop;
for my $p (qw|name position _position department depart_ment dep:ment password session |) {
    if ($p eq 'password') {
	$prop = $person->define_property( $p, type => 'password' );
    } else {
	$prop = $person->define_property( $p );
    }
    status( "Defining property 'Person:$p'", $prop );
    
}
$prop = $person->define_property( 'look I have spaces in my name' );
status( "Defining property 'Person:spacealicious'", $prop );


my $terje = $person->create( "terjekv" );
$terje->property( name => "Terje Kvernes" );
$terje->property( password => "foo" );

my $bard  = $person->create( "bard" );
$bard->property( name => "Barkie" );
$bard->property( password => "" );
$bard->property( department => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" );


# --- Define Phones
my $phone = $ygg->define_entity( "Telephone" );
my $ophone = $phone->create( "22 85 54 02" );


# --- Define contractor
my $con = $ygg->define_entity( "Contractor" );
my $bravida = $con->create( "Bravida" );
status( "Bravida", $bravida );

# --- Define Relations
# room<->phone
# host<->room
# person<->host

my $hr = $ygg->define_relation( $host_entity, $room );
my $rp = $ygg->define_relation( $room, $phone );
my $ph = $ygg->define_relation( $person, $host_entity );
my $pc = $ygg->define_relation( $phone, $con );
my $pp = $ygg->define_relation( $person, $phone );

print "Host<->Room:", $hr->{label}, ":\n";

$hr->link($nommo, $b810);
$hr->unlink( $nommo, $b810 );
$hr->unlink( $b810, $nommo );

$ph->link( $terje, $nommo );
$ph->link( $bard, $baal );

$hr->link( $nommo, $b701 );
$hr->link( $b701, $baal );

$rp->link( $b701, $ophone );

my $flapp = $pc->link( $ophone, $bravida );
status( 'Bravida<->Ophone', $flapp );

$pp->link( $terje, $ophone );

for my $e ($phone, $con, $room) {
  my @res = $terje->fetch_related( $e );

  if (@res) {
    for my $p ( @res ) {
      print "Query: * ", $terje->id(), " has " , $e->name() , ", " , $p->id(), " in ", $p->pathlength(), " steps.\n";

      my @res2 = $p->fetch_related( $person );

      if( @res2 ) {
	for my $p2 ( @res2 ) {
	  print "  -- Reverse * ", $p->id(), " has Person ", $p2->id(), "\n";
	  
	}
      } else {
	print " -- Reverse FAIL * ", $p->id(), " is not related to Person.\n";
      }
    }
  } else {
      # FIXME, this shouldn't happen?
      print "MISS: ", $terje->id(), " is not related to " , $e->name(), ".\n";
  }
}
