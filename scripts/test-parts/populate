#!/usr/bin/perl

use strict;
use warnings;

use Preamble qw|getopts status status_die|;

my $opts = getopts();

my $ygg = new Yggdrasil( debug => $opts->{debug} );
status_die( "Yggdrasil", $ygg );

my $connect = $ygg->connect( %$opts );
status_die( "Connect", $connect, 1 );

my $login = $ygg->login( user => $opts->{yuser}, password => $opts->{ypass} );
status_die( "Login", $login, 1 );

# Define entities
my $host_entity   = $ygg->define_entity( 'Hoste' );
status( 'Hoste', $host_entity );

my $room_entity   = $ygg->define_entity( 'Room' );
status( 'Room', $room_entity );
my $person_entity = $ygg->define_entity( 'Person' );
status( 'Person', $person_entity );
my $p_s_entity    = $ygg->define_entity( 'Person::Student' );
status( 'Person::Student', $p_s_entity );

$host_entity   = $ygg->get_entity( 'Hoste' );
$host_entity->define_property( 'ip' );

status( 'Hoste', $host_entity );

# Define instance
my $nommo = $host_entity->create( 'nommo2' );
status( 'Create', $nommo );
$nommo    = $host_entity->fetch( 'nommo2' );
status( 'Fetch', $nommo );

$nommo->get( 'ip' );
$nommo->set( 'ip', '129.240.222.179' );

exit;

# Define properties, cannot be "gotten".
my $host_property_ip      = $host_entity->define_property( 'ip' );
my $room_property_comment = $room_entity->define_property( 'comment' );
my $person_propert_name   = $person_entity->define_property( 'name' );
my $p_s_property_grade    = $ygg->define_property( 'Person::Student:grade', type => 'text', null => 0);

# Define relations
my $host_room_relation   = $ygg->define_relation( $host_entity, $room_entity, 'hr' );
my $person_room_relation = $ygg->define_relation( $person_entity, $room_entity, 'pr' );

$host_room_relation = $ygg->get_relation( 'hr' );

# --- Define Hosts
my $hoste = define Yggdrasil::Entity 'Host';
status( 'Defining Host' );
my $ip = define $hoste 'ip', 'type' => 'text';
my $blob = define $hoste 'blobbie', 'type' => 'binary', null => 0;
my $serial = define $hoste 'serial';
status( 'Defining Host:serial' );

print $hoste->null( 'serial' ), " : ", $hoste->null( 'blobbie' ), "\n";
print $hoste->type( 'serial' ), " : ", $hoste->type( 'blobbie' ), "\n";

# my $nommo  = Ygg::Host->new( 'nommo' );
status( 'Creating the instance nommo (Ygg::Host)' );
my $baal   = Ygg::Host->new( 'baal' );
my $escher = Ygg::Host->new( 'escher' );

$nommo->property( 'serial', 1 );
status( 'Setting nommo->serial to 1' );

$nommo->property( 'serialasda', undef );
status( 'Setting nommo->serialasda to undef' );

$nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1' );
$nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef' );
$nommo->property( 'serial', '1');
status( 'Setting nommo->serial to 1' );
$nommo->property( 'serial', undef);
status( 'Setting nommo->serial to undef' );
  
$baal->property( 'ip' , 'b1' );
$baal->property( 'ip' , 'b2' );
$baal->property( 'serial', 'bserial');

$escher->property( 'serial', 'eserial');
$escher->property( 'ip', 'e1');

$nommo = Ygg::Host->get( 'nommo' );
print "------>>>> $nommo->{_id}\n";

# --- Define Rooms
my $room = define Yggdrasil::Entity 'Room';
define Ygg::Room 'use', type => 'Text';

my $b810 = Ygg::Room->new( 'B810' );
$b810->property( "use", "Terminal room" );

my $b701 = $room->new( "B701" );
$b701->property( "use", "Hang-out" );


# --- Define Persons
my $person = define Yggdrasil::Entity "Person";
define Yggdrasil::Property $person => "name";
define $person "position";
define $person "_position";
define $person "department";
define $person "depart_ment";
define $person "password", type => "PASSWORD";
define $person "session";
define $person "change password";

my $terje = $person->new( "terjekv" );
$terje->property( name => "Terje Kvernes" );
$terje->property( password => "foo" );


my $bard  = $person->new( "bard" );
$bard->property( name => "Barkie" );
$bard->property( password => "" );
$bard->property( department => "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx" );


# --- Define Phones
my $phone = define Yggdrasil::Entity "Telephone";
my $ophone = $phone->new( "22 85 54 02" );


# --- Define contractor
my $con = define Yggdrasil::Entity "Contractor";
my $bravida = $con->new( "Bravida" );


# --- Define Relations
# room<->phone
# host<->room
# person<->host

my $hr = define Yggdrasil::Relation $hoste, 'Room';
define Yggdrasil::Relation $room, $phone;
define Yggdrasil::Relation $person, $hoste;
define Yggdrasil::Relation $phone, $con;

define Yggdrasil::Relation $person, $phone;

print "Host<->Room:", $hr->{label}, ":\n";

$hr->link($nommo, $b810);
$hr->unlink( $nommo, $b810 );
exit;

$nommo->unlink( $b810 );

$terje->link( $nommo );
$bard->link( $baal );

$nommo->link( $b701 );
$b701->link( $baal );

$b701->link( $ophone );

$bravida->link( $ophone );
$terje->link( $ophone );

for my $e (qw /Telephone Contractor Room/ ) {
  my @res = $terje->fetch_related( $e );

  if (@res) {
    for my $p ( @res ) {
      print "ZOOM * ", $terje->id(), " has $e ", $p->id(), " in ", $p->pathlength(), " steps.\n";

      my @res2 = $p->fetch_related( $person );

      if( @res2 ) {
	for my $p2 ( @res2 ) {
	  print "ZOOM * ", $p->id(), " has Person ", $p2->id(), "\n";
	  
	}
      } else {
	print "ZOOM * ", $p->id(), " is not related to Person.\n";
      }
    }
  } else {
    print "ZOOM * ", $terje->id(), " is not related to $e.\n";
  }
}

define Yggdrasil::Entity 'Person';
define Yggdrasil::Entity 'Student', inherit => 'Person';
define Yggdrasil::Entity 'Student', inherit => 'Person';
