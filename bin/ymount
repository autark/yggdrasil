#!/usr/bin/perl

use strict;
use warnings;

BEGIN { our $VERSION = '0.03' };

use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Term::ReadLine;
use Text::ParseWords;

use Crypt::GeneratePassword;

use Yggdrasil;
use Yggdrasil::Common::CommandLine;
use Yggdrasil::Common::Config;

use Fuse qw(fuse_get_context);
use POSIX qw(ENOENT EISDIR EINVAL);

my $cmdline = Yggdrasil::Common::CommandLine->new();
my $label   = $cmdline->get('label') || 'default';

my $c = Yggdrasil::Common::Config->new();
my $config = $c->get($label);

unless ($config) {
    $config = $c->get('ENV');
    die "No such label as $label and falling back to ENV failed\n"
	unless $config->get( 'engineuser' );
}

my ($dbuser, $password, $host, $port, $db, $engine) =
  ($config->get( 'engineuser' ), $config->get( 'enginepassword' ), $config->get( 'enginehost' ),
   $config->get( 'engineport' ), $config->get( 'enginedb' ), $config->get( 'enginetype' ));

my $y = new Yggdrasil();
my $status = $y->get_status();

$y->connect( 
	    user      => $dbuser,
	    password  => $password,
	    host      => $host,
	    port      => $port,
	    db        => $db,
	    engine    => $engine,
	    
	    daemonhost => $config->get( 'daemonhost' ),
	    daemonport => $config->get( 'daemonport' ),
	   );

die $status->message(), "\n" unless $status->OK();

my $uname = $cmdline->get( 'username' ) || $config->get( 'authuser' ) || (getpwuid($>))[0];
my $upass = $cmdline->get( 'password' ) || $config->get( 'authpass' ) || $cmdline->read_password();
my $iam = $y->login( username => $uname, password => $upass );    

die $status->message(), "\n" unless $status->OK();


my $root = FuseDir->new(
    "/",
    Yggdrasil::Fuse::Entities->new(Entities => $y),
    Yggdrasil::Fuse::Relations->new(Relations => $y),
    FuseFile->new( README => "This is Yggdrasil Version!\n"),
    FuseFile->new( Information => "Logged in as: " . $y->user(), "Server information: " . $y->info() ),

    # --- TEST
    FuseDir->new( testdir => 
		  FuseFile->new(a => "aaaa\n"),
		  FuseFile->new(b => "bbbbbb\n") ),
    FuseDir->new(gaba =>
		 FuseDir->new(Mele =>
			      Yggdrasil::Fuse::Entities->new(spook => $y),
			      FuseFile->new(README => "Magic\n")
			      ),
		 FuseFile->new('.topsecret' => "secret\n"),
		 FuseDir->new('.hidden'),
		 Yggdrasil::Fuse::Entities->new(more => $y) ),
    );

sub get_path {
    my $path = shift;
    $path =~ s,^/,,; 
    my @parts = split m</>, $path; 
    return \@parts;
}


sub foo {
    my $action = shift;

    print "[NOT IMPLEMENTED $action] (", join("), (", @_), ")\n";
    return 0;
}

sub query {
    my $cmd  = shift;
    my $path = get_path(shift);

    print "[$cmd] ", join("/", @$path), "\n";
    return $root->query( $cmd, $path, @_ );
}

sub fuse_getattr  { return query( getattr  => @_ ) }
sub fuse_getdir   { return query( getdir   => @_ ) }
sub fuse_read     { return query( read     => @_ ) }
sub fuse_write    { return query( write    => @_ ) }
sub fuse_open     { return query( open     => @_ ) }
sub fuse_truncate { return query( truncate => @_ ) }
sub fuse_mkdir    { 
    my $path = get_path(shift);
    my $args = pop @$path;
    
    $path = join("/", @$path);
    return query( mkdir => $path, $args ); 
}
sub fuse_rmdir    { 
    my $path = get_path(shift);
    my $args = pop @$path;
    
    $path = join("/", @$path);
    return query( rmdir => $path, $args ); 
}
sub fuse_mknod    {
    my $path = get_path(shift);
    my $args = pop @$path;

    $path = join("/", @$path);
    return query( mknod => $path, $args, @_ );
}
sub fuse_unlink   {
    my $path = get_path(shift);
    my $args = pop @$path;

    $path = join("/", @$path);
    return query( unlink => $path, $args, @_ );
}

sub fuse_statfs {
    my $blocks = $y->storage()->size() / 1024;
    my $files  = 42;

    # $namelen, $files, $files_free, $blocks, $blocks_avail, $blocksize
    return 255, $files*2, $files, $blocks*2, $blocks, 1024;
}


# If you run the script directly, it will run fusermount, which will in turn
# re-run this script.  Hence the funky semantics.
my ($mountpoint) = "";
$mountpoint = shift(@ARGV) if @ARGV;
Fuse::main(
    mountpoint  => $mountpoint,
    
    getattr     => \&fuse_getattr,
    getdir      => \&fuse_getdir,
    open        => \&fuse_open,
    read        => \&fuse_read,
    mkdir       => \&fuse_mkdir,
    statfs      => \&fuse_statfs,
    truncate    => \&fuse_truncate,
    write       => \&fuse_write,    
    mknod       => \&fuse_mknod,

    rmdir       => \&fuse_rmdir,
    unlink      => \&fuse_unlink,

    readlink    => sub {  foo('readlink', @_); },
    symlink     => sub { foo('symlink', @_); },
    rename      => sub { foo('rename', @_); },
    link        => sub { foo('link', @_); },
    chmod       => sub { foo('chmod', @_); },
    chown       => sub { foo('chown', @_); },
    utime       => sub { foo('utime', @_); },
    flush       => sub { foo('flush', @_); },
    release     => sub { foo('release', @_); },
    fsync       => sub { foo('fsync', @_); },
    setxattr    => sub { foo('setxattr', @_); },
    #getxattr    => sub { foo('getxattr', @_); },
    listxattr   => sub { foo('listxattr', @_); },
    removexattr => sub { foo('removexattr', @_); },
);

###############################################################################
####################################################################### FuseDir
package FuseDir;
use POSIX qw(ENOENT EISDIR EINVAL);

sub new { 
    my $class = shift;
    my $name  = shift;
    my @files = @_;

    my $self = bless {}, $class;

    $self->{name}     = $name;
    $self->{children} = \@files;

    return $self;
}

sub type      { 0040; }
sub mode      { 0700; }
sub size      { 4096; }
sub gid       { $(;   }
sub uid       { $<;   }
sub blocksize { 1024; }
sub dev       { 0;    }
sub rdev      { 0;    }
sub inode     { 0;    }
sub blocks    { 1;    }
sub nlink     { 1;    }
sub atime     { $^T;  }
sub ctime     { $^T;  }
sub mtime     { $^T;  }
sub content   {       }
sub modes     { my $self = shift; return ($self->type() << 9) + $self->mode(); }
sub name      { my $self = shift; $self->{name} };

sub query {
    my $self    = shift;
    my $fusecmd = shift;
    my $path    = shift;

    if( @$path ) {
	my $name = shift @$path;
	my $node = $self->child($name);

	return -ENOENT() unless $node;
	return $node->query( $fusecmd, $path, @_ );
    }

    $self->$fusecmd( @_ );
}

sub children {
    my $self = shift;

    if( @_ ) {
	push( @{ $self->{children} }, @_ );
    }

    return @{ $self->{children} };
}

sub filenames {
    my $self = shift;

    return map { $_->name() } $self->children();
}

sub child {
    my $self = shift;
    my $name = shift;

    for my $child ( $self->children() ) {
	return $child if $name eq $child->name();
    }

    return;
}

sub getattr {
    my $self = shift;

    return ( $self->dev(), $self->inode(), $self->modes(), $self->nlink(), 
	     $self->uid(), $self->gid(), $self->rdev(), $self->size(),
	     $self->atime(), $self->mtime(), $self->ctime(), 
	     $self->blocksize(), $self->blocks() );
}

sub getdir {
    my $self = shift;

    return qw/. ../, $self->filenames(), 0;
}

sub read :method {
    my $self = shift;
    my( $buf, $off ) = @_;

    return -EINVAL() if $off > $self->size();
    return 0 if $off == $self->size();

    return substr( $self->content(), $off, $buf );
}

sub open :method { return -EISDIR(); }
sub truncate { return -EISDIR(); }
sub write :method { return -EISDIR(); }

sub mkdir :method {
    my $self = shift;
    my $name = shift;

    $self->children( FuseDir->new($name) );
    return 0;
}

sub rmdir :method {
    my $self = shift;
    my $name = shift;

    # Find the directory entry in the list of children.
    my $i;
    for my $count (0 .. $#{$self->{children}}) {
	$i = $count if $self->{children}->[$count]->name() eq $name;	  
    }

    # Yoink the bugger unless it's an Yggdrasil::Fuse object.  You
    # won't be able to recreate these things, so removing it is a
    # one-way street.
    splice @{$self->{children}}, $i, 1 if defined $i && ! $self->{children}->[$i]->isa( 'Yggdrasil::Fuse' );
    return 0;
}

sub mknod :method {
    my $self = shift;
    my $name = shift;
    my $mode = shift;
    my $something = shift;

    $self->children( FuseFile->new($name, '') );
    return 0;
}

sub unlink :method { 
    my $self = shift;
    my $name = shift;

    # Find the file entry in the list of children.
    my $i;
    for my $count (0 .. $#{$self->{children}}) {
	$i = $count if $self->{children}->[$count]->name() eq $name;	  
    }
    
    splice @{$self->{children}}, $i, 1 if defined $i && $self->{children}->[$i]->isa( 'FuseFile' );
    return 0;    
}
    
###############################################################################
###################################################################### FuseFile
package FuseFile;
use parent -norequire, qw(FuseDir);
use POSIX qw(:fcntl_h);

sub new {
    my $class   = shift;
    my $self = bless {}, $class;

    $self->{name}    = shift;

    my $content = join "\n", @_;
    chomp $content;
    $self->{content} = "$content\n";

    
    return $self;
}
sub mode { 0600; }
sub type { 0100; }
sub size { my $self = shift; length( $self->{content}); }
sub content { my $self = shift; $self->{content}; }

sub truncate {
    my $self = shift;
    my $off  = shift;

    substr( $self->{content}, $off) = '';
    return 0;
}

sub open :method {
    my $self = shift;
    my $mode = shift;

    return 0;
}

sub write :method {
    my $self = shift;
    my $content = shift;
    my $off = shift;

    substr($self->{content}, $off) = $content;
    return length($content);
}

###############################################################################
############################################################### Yggdrasil::Fuse
package Yggdrasil::Fuse;
use parent -norequire, qw(FuseDir);
use POSIX qw(:errno_h);

use Time::Local;

sub new {
    my $class = shift;
    my $self  = {};

    $self->{name} = shift;
    $self->{ygg}  = shift;
    $self->{obj}  = shift;
    $self =  bless $self, $class;
    return $self;
}

sub status {
    my $self = shift;

    return $self->{ygg}->get_status();
}

sub iso2unix {
    my $self = shift;
    my $iso = shift;

    my($date, $time) = split ' ', $iso;
    my($y,$m,$d) = split '-', $date;
    my($H,$M,$S) = split ':', $time;

    return timelocal( $S, $M, $H, $d, $m-1, $y );
}

sub mtime {
    my $self = shift;

    my $tick = $self->{ygg}->get_tick( $self->{obj}->start() );
    return $self->iso2unix( $tick->{stamp} );
}

sub _return {
    my $self = shift;
    my $goal = shift || 0;

    my $code = $self->status()->status();    
    if ($code < 300) {
	return $goal;
    } elsif ($code < 400) {
	return -EPERM();
    } elsif ($code < 500) {
	return -EACCES();
    } 

    return -ENOSYS();
}

###############################################################################
##################################################### Yggdrasil::Fuse::Entities
package Yggdrasil::Fuse::Entities;
use parent -norequire, qw(Yggdrasil::Fuse);

sub mtime { $^T }

sub children {
    my $self = shift;

    return map { Yggdrasil::Fuse::Entity->new($_->id(), $self->{ygg}, $_) } $self->{ygg}->entities();
}

sub mkdir :method {
    my $self = shift;
    my $name = shift;

    $self->{ygg}->define_entity( $name );
    return $self->_return();
}

sub rmdir :method {
    my $self = shift;
    my $name = shift;

    $self->{ygg}->expire_entity( $name );
    return $self->_return();
}


###############################################################################
####################################################### Yggdrasil::Fuse::Entity
package Yggdrasil::Fuse::Entity;
use parent -norequire, qw(Yggdrasil::Fuse);
use POSIX qw(:errno_h);

sub children {
    my $self = shift;

    my @i = map { Yggdrasil::Fuse::Instance->new($_->id(), $self->{ygg}, $_) } $self->{obj}->instances();
    my @p = map { Yggdrasil::Fuse::EntityProperty->new( join(":", $_->id(), $_->type(), ($_->null()?'TRUE':'FALSE') ), $self->{ygg}, $_) } $self->{obj}->properties();

    return @i, @p;
}

sub mkdir :method {
    my $self = shift;
    my $name = shift;

    my $e = $self->{obj}->create($name);
    return $self->_return();
}

sub rmdir :method {
    my $self = shift;
    my $name = shift;

    my $i = $self->{obj}->fetch($name);
    return -ENOENT() unless $self->status()->OK();
    
    $i->expire();
    return $self->_return();
}

sub mknod :method {
    my $self = shift;
    my $file = shift;
    my $mode = shift;
    my $something = shift;

    my( $name, $type, $nullp ) = split /:/, $file;

    $nullp = $nullp eq 'FALSE' ? 0 : 1;

    $self->{obj}->define_property( $name, type => $type, nullp => $nullp );
    return $self->_return();
}

sub unlink :method {
    my $self = shift;
    my $file = shift;

    my ($propname, $type, $nullp) = split /:/, $file;
    
    $self->{obj}->undefine_property( $propname );
    return $self->_return();
}


###############################################################################
##################################################### Yggdrasil::Fuse::Instance
package Yggdrasil::Fuse::Instance;
use parent -norequire, qw(Yggdrasil::Fuse);
use POSIX qw(:errno_h);

sub mode { 0500; }

sub children {
    my $self = shift;

    my $history_object = Yggdrasil::Fuse::HistoricInstanceProperties->new( ':history', $self->{ygg}, $self->{obj} );
    
    return $history_object, map { Yggdrasil::Fuse::InstanceProperty->new($_->id(), $self->{ygg}, $self->{obj}) } $self->{obj}->entity()->properties();
}

sub mknod  :method { return -ENOSYS() }
sub unlink :method { return -ENOSYS() }
sub mkdir  :method { return -ENOSYS() }
sub rmdir  :method { return -ENOSYS() }

###############################################################################
####################################Yggdrasil::Fuse::HistoricInstanceProperties
package Yggdrasil::Fuse::HistoricInstanceProperties;
use parent -norequire, qw(Yggdrasil::Fuse);
use POSIX qw(:errno_h);

sub children {
    my $self = shift;

    return map { Yggdrasil::Fuse::HistoricInstanceProperty->new($_->id(), $self->{ygg}, $self->{obj}) } $self->{obj}->entity()->properties();
}

###############################################################################
######################################Yggdrasil::Fuse::HistoricInstanceProperty
package Yggdrasil::Fuse::HistoricInstanceProperty;
use parent -norequire, qw(Yggdrasil::Fuse);

sub children {
    my $self = shift;

    # Return the ticks where this property changed.
    my %changes = $self->{obj}->property_history( $self->name() );
    my @targets;

    for my $tick (keys %changes) {
	my $instance = $self->{obj}->entity()->fetch( $self->{obj}->id() );
	$instance->{_start} = $tick;
	$instance->{_stop}  = $tick;
	my $ip = Yggdrasil::Fuse::InstanceProperty->new( $tick, $self->{ygg}, $instance );
	$ip->{realname} = $self->name();
	push @targets, $ip;
    }
    return @targets;
}


###############################################################################
############################################# Yggdrasil::Fuse::InstanceProperty
package Yggdrasil::Fuse::InstanceProperty;
use parent -norequire, qw(Yggdrasil::Fuse);

sub mode { 0600; }
sub type { 0100; }
sub size { 
    my $self = shift;

    return length( $self->content() );
}

sub content {
    my $self = shift;

    my $c = $self->{obj}->property( $self->{realname} || $self->name());
    return defined $c ? $c : '';
}

sub write {
    my $self = shift;
    my $content = shift;

    my $len = length($content);

    $self->{obj}->property( $self->name() => $content );
    return $self->_return( $len );
}

sub open { return 0; }
sub truncate { return 0; }

###############################################################################
############################################### Yggdrasil::Fuse::EntityProperty
package Yggdrasil::Fuse::EntityProperty;
use parent -norequire, qw(Yggdrasil::Fuse);

sub mode { 0600; }
sub type { 0100; }

sub size { 
    my $self = shift;

    return length( $self->content() );
}

sub content {
    my $self = shift;

    my $p = $self->{obj};
    my @data = ("Full name: ", $p->entity()->id(), ":", $p->id(), "\n",
		"Type: ", $p->type(), "\n",
		"Null: ", ($p->null()?'TRUE':'FALSE'), "\n");
		
    return join('', @data);
}

sub open { return 0; }
sub truncate { return 0; }

###############################################################################
#################################################### Yggdrasil::Fuse::Relations
package Yggdrasil::Fuse::Relations;
use parent -norequire, qw(Yggdrasil::Fuse);
sub mtime { $^T }

sub children {
    return;
}
