#!/usr/bin/perl

use strict;
use warnings;

use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Yggdrasil;

my ($dbuser, $password, $host, $port, $db, $engine) =
  ($ENV{YGG_USER}, $ENV{YGG_PASSWORD}, $ENV{YGG_HOST}, $ENV{YGG_PORT}, $ENV{YGG_DB}, $ENV{YGG_ENGINE});

my $y = new Yggdrasil();
my $status = $y->get_status();

$y->connect( 
	    user      => $dbuser,
	    password  => $password,
	    host      => $host,
	    port      => $port,
	    db        => $db,
	    engine    => $engine,
	   );

die $status->message() unless $status->OK();

my $iam = $y->login();
my @roles = $iam->get_cached_member_of();

die $status->message() unless $status->OK();

# print $iam->username() . " -> " . join(', ', map { $_->name() }
# @roles) . " <$dbuser\@$host ($db / $engine)>\n";

&init( $0, @ARGV );

# Initial call, gets a command if needed, dispatches to proper
# commands.
sub init {
    my $scriptname = shift;
    my @arguments  = @_;
    $scriptname =~ s|.*/||;

    my $command;
    if ($scriptname ne 'ycontrol') {
	$command = $scriptname;
    } else {
	$command = shift @arguments;
    }

    $command = &get_line( 'Command' ) unless $command;

    if ($command eq 'user') {
	&do_user( @arguments );
    } elsif ($command eq 'role') {
	&do_roles( @arguments );
    } elsif ($command eq 'entity') {
	&do_entity( @arguments );
    } elsif ($command eq 'instance') {
	&do_instance( @arguments );
    } else {
	print "Unknown command '$command'.\n";
	exit 1;
    }
}

# Get a line from STDIN.  Some real input handling should go here at
# some point.
sub get_line {
    my $prompt = shift;
    print "$prompt > "; 
    my $retval = <STDIN>;
    chomp $retval;
    return $retval;
}


# User blocks, special entity type, handled as such.
sub do_user {
    my $subcommand = shift;
    my @arguments  = @_;

    $subcommand = &get_line( 'User' ) unless $subcommand;

    if ($subcommand eq 'list') {
	&do_user_list();
    } elsif ($subcommand eq 'info') {
	&do_user_info( @arguments );
    } elsif ($subcommand eq 'edit') {
	&do_user_edit( @arguments );
    } elsif ($subcommand eq 'add') {
	&do_user_add( @arguments );
    } elsif ($subcommand eq 'remove') {
	&do_user_remove( @arguments );
    } else {
	print "Unknown user subcommand '$subcommand'.\n";
	exit 2;
    }    
}

# TODO, add filter.
sub do_user_list {
    my $entity = $y->get_entity( 'MetaAuthUser' );
    my @users  = $entity->instances();
    
    printf "%-20s | %-20s | %-20s | %-20s | %s\n", 'Id', 'Full name', 'Password', 'Roles', 'Session';
    for my $user (@users) {
	# Why do we have to cast this object to the User class?
	# Removing this cast breaks stuff.
	$user = $y->get_user( $user->id() );
	printf "%-20s | %-20s | %-20s | %-20s | %s\n", $user->id(),
	  $user->fullname() || '', $user->password() || '',
	    join (', ', map { $_->name() } $user->get_cached_member_of()),
	      $user->session() || '';
    }    
}

sub do_user_info {
    my $userid = shift || &get_line( 'User identification' );
    my $userobject = $y->get_user( $userid ) if $userid;
    
    if ($userobject) {
	printf "%-12s -> %s\n", 'Username',  $userobject->username() || '';
	printf "%-12s -> %s\n", 'Full name', $userobject->fullname() || '';
	printf "%-12s -> %s\n", 'Session',   $userobject->session() || '';
	printf "%-12s -> %s\n", 'Password',  $userobject->password() || '';

	printf "%-12s -> %s\n", 'Roles',     join (', ', map { $_->name() } $userobject->get_cached_member_of());
	
    } else {
	print "No user '$userid'.\n";
    }
    return $userobject;
}

sub do_user_edit {
    my $userid = shift || &get_line( 'User identification' );
    my $userobject = $y->get_user( $userid );
    return unless $userobject;
    
    my $field = shift || lc &get_line( 'User field' );
    $field =~ s/ //g;

    if ($field eq 'fullname') {
	my $fn = join( ' ', @_ );
	$userobject->fullname( $fn || &get_line( 'Full name' ) );
    } elsif ($field eq 'password') {
	$userobject->password( shift || &get_line( 'Password' ) );	
    } elsif ($field eq 'role') {
	my $operation = shift || lc &get_line( 'Role operation' );
	if ($operation eq 'add') {
	    &do_user_role_add( $userobject, @_);
	} elsif ($operation eq 'remove') {
	    &do_user_role_remove( $userobject, @_);	    
	} else {
	    print "Unknown role operation '$operation'.\n";
	}
    } else {
	print "Unknown field, '$field'.\n";
    }    
    # &do_user_info( $userid );
}

sub do_user_role_add {
    my $userobject = shift;
    my @roles = @_;
    @roles = split /\W+/, lc &get_line( "Role(s) to add to " . $userobject->username() ) unless @roles;
    
    for my $role (@roles) {
	my $roleobject = $y->get_role( $role );
	if (! $roleobject) {
	    print "No role '$role'\n";
	} else {
	    if ($roleobject->add( $userobject )) {
		print "'", $userobject->username(), "' added to the role '$role'.\n";
	    } else {
		print "Unable to add '", $userobject->username(), "' to the role '$role'.\n";
	    }
	}
    }    
}

sub do_user_role_remove {
    my $userobject = shift;
    my @roles = @_;
    @roles = split /\W+/, lc &get_line( "Role(s) to remove from " . $userobject->username() ) unless @roles;
    
    for my $role (@roles) {
	my $roleobject = $y->get_role( $role );
	if (! $roleobject) {
	    print "No role '$role'\n";
	} else {
	    if ($roleobject->remove( $userobject )) {
		print "'", $userobject->username(), "' removed from the role '$role'.\n";
	    } else {
		print "Unable to remove '", $userobject->username(), "' from the role '$role'.\n";
	    }
	}
    }    
}

# Entity parsing.
sub do_entity {
    my $subcommand = shift;
    my @arguments  = @_;

    $subcommand = &get_line( 'Entity command' ) unless $subcommand;

    if ($subcommand eq 'list') {
	&do_entity_list();
    } elsif ($subcommand eq 'info') {
	&do_entity_info( @arguments );
    } elsif ($subcommand eq 'edit') {
	&do_entity_edit( @arguments );
    } elsif ($subcommand eq 'add') {
	&do_entity_add( @arguments );
    } elsif ($subcommand eq 'remove') {
	&do_entity_remove( @arguments );
    } else {
	print "Unknown entity subcommand '$subcommand'.\n";
	exit 2;
    }        
}

# TODO, add filter.
sub do_entity_list {    
    my $entity = $y->entities();
    
    printf "%-20s | %s\n", 'Id', 'Instances';
    for my $e ($y->entities()) {
	my @instances = $e->instances();

	if (! @instances) {
	    printf "%-20s | %3d\n", $e->name(), scalar @instances;
	} elsif (@instances > 5) {
	    printf "%-20s | %3d ; %s ...\n", $e->name(), scalar @instances,
	      &_map_field_and_join( 'id', @instances[ 0 .. 5 ]);
	} else {
	    printf "%-20s | %3d ; %s\n", $e->name(), scalar @instances,
	      &_map_field_and_join( 'id', @instances);
	    
	}
    }    
}

sub do_entity_info {
    my $ename = shift || &get_line( 'Entity identifier' );
    my $entity = $y->get_entity( $ename );
    
    if ($entity) {
	# TODO, limit rate / numbers.
	printf "%-12s -> %s\n", 'Properties', &_map_field_and_join( 'name', $entity->properties() );
	printf "%-12s -> %s\n", 'Instances', &_map_field_and_join( 'id', $entity->instances() );
    } else {
	print "No entity '$ename'.\n";
	return;
    }
}

# Add / remove / edit properties for the entity, property value is
# done via instance lookups.
sub do_entity_edit {
    my $entityid = shift || &get_line( 'Entity identification' );
    my $object = $y->get_entity( $entityid );

    my $task = shift || &get_line( 'Entity command' );
    
    if ($task eq 'add') {
	my $property = shift || &get_line( 'Property identification' );

	if ($object->property_exists( $property) ) {
	    print "'$entityid' already has a property named '$property'.\n";
	    return;
	}

	my $cannull = shift || &get_line( 'Can have null value' );
	if ($cannull && $cannull =~ /^[yY]/) {
	    $cannull = 1; 
	} else {
	    $cannull = 0;
	}
	
	my $type = uc ( shift || &get_line( 'Field type' ));
	my %valid_types = $y->get_property_types();
	
	unless ($valid_types{$type}) {
	    print "Invalid property type '$type'.\n";
	    return;
	}
	
	$object->define_property( $property, nullp => $cannull, type => $type);

	if (! $status->OK()) {
	    print $status->message(), "\n";
	} else {
	    print "Added property '$property' to '$entityid'.\n";
	}
    } elsif ($task eq 'remove') {
	print "Removing properties not implemented.\n";
    }
}


sub do_instance {
    my ($subcommand, $entity) = (shift, shift);
    my @arguments = @_;

    $subcommand = &get_line( 'Instance command' ) unless $subcommand;
    $entity = &get_line( 'Entity' ) unless $entity;

    if ($subcommand eq 'list') {
	&do_instance_list( $entity );
    } elsif ($subcommand eq 'info') {
	&do_instance_info( $entity, @arguments );
    } elsif ($subcommand eq 'edit') {
	&do_instance_edit( $entity, @arguments );
    } elsif ($subcommand eq 'add') {
	&do_instance_add( $entity, @arguments );
    } elsif ($subcommand eq 'remove') {
	&do_instance_remove( $entity, @arguments );
    } else {
	print "Unknown instance subcommand '$subcommand'.\n";
	exit 2;
    }        
}

sub do_instance_list {
    my $entityid = shift;
    my $entity   = $y->get_entity( $entityid );

    if ($entity) {
	my @props = sort $entity->properties();

	my @header;
	printf "%20s : ", 'Identificator';
	for my $p (@props) {
	    push @header, sprintf( "%12s", $p->name() );
	}
	printf join " | ", @header;	
	print "\n";
	
	for my $instance ($entity->instances()) {
	    printf "%20s : ", $instance->id();
	    my @display_prop;
	    for my $p (@props) {
		push @display_prop, sprintf( "%12s", $instance->get( $p ) || '');
	    }
	    printf join " | ", @display_prop;
	    print "\n";
	}
	
    } else {
	print "Unknown entity '$entityid'.\n";
	exit 2;	
    }
}

sub do_instance_info {
    my $entityid = shift;
    my $objectid = shift;
    my $entity   = $y->get_entity( $entityid );
    my $object   = $entity->fetch( $objectid );
    
    printf "%20s\n", "Instance data";
    if (!$object) {
	print "No instance of '$objectid' found in '$entityid'.\n";
    } else {
	for my $p (sort $entity->properties()) {
	    printf "%20s : %s\n", $p->name(), $object->get( $p ) || '';
	}

	my @rels;
	for my $e ( $y->entities() ) {
	    my @hits = $object->fetch_related( $e );
	    if (@hits) {
		push @rels, sprintf "%20s : %s\n", $e->name(), join(", ", map { $_->id() } @hits);
	    }
	}
	
	if (@rels) {
	    printf "%20s\n", "Relations";
	    print $_ for @rels;
	}
    }
}

sub do_instance_edit {
    my $entity_or_property = shift || lc &get_line( 'Property / Relation' );
    my $entityid = shift || lc &get_line( 'Entityid' );
    my $objectid = shift || lc &get_line( 'Instanceid' );
    my $entity   = $y->get_entity( $entityid );

    if (!$entity) {
	print "Unknown entity '$entityid'.\n";
	return;
    }
    
    my $object   = $entity->fetch( $objectid );
    
    if (!$object) {
	print "No instance of '$objectid' found in '$entityid'.\n";
    } else {
	if ($entity_or_property =~ /^[Rr]/) {
	    print "Not implemented.\n";	    
	} elsif ($entity_or_property =~ /^[Pp]/) {
	    my $propertyid = shift || lc &get_line( 'Property' );
	    my $property = $entity->get_property( $propertyid );
	
	    if ($property) {
		$object->set( $property->name(), shift ||
			      &get_line( 'New value (' . $object->get( $property ) . ')' ) );
	    } else {
		print "No property '$propertyid' in entity '$entityid'.\n";
	    }
	    
	} else {
	    print "Unknown edit type '$entity_or_property'\n";
	}
    }
}

sub do_instance_add {
    my $entityid = shift;
    my $objectid = shift || &get_line( 'Identification' );
    my $entity   = $y->get_entity( $entityid );

    if (!$entity) {
	print "Unknown entity '$entityid'.\n";
	return;
    }
    
    my $object   = $entity->fetch( $objectid );
    
    if ($object) {
	print "'$objectid' already exists in '$entityid'.\n";
    } else {
	$object = $entity->create( $objectid );
	for my $p (sort $entity->properties()) {
	    $object->set( $p, &get_line( $p->name() ) );
	}
    }
}


sub _map_field_and_join {
    my $field = shift;
    my @list = @_;
    return join(", ", sort map { $_->$field() } @list );
}

