#!/usr/bin/perl

use strict;
use warnings;

use MIME::Base64;
use Getopt::Long;

use FindBin qw($Bin);
use lib qq($Bin/../lib);

use Yggdrasil;

our %INSTANCE_MAP;
our %ENTITY_MAP;
our %RELATION_MAP;

my ($user, $password, $host, $port, $db, $engine, $mapper, $NAMESPACE, $VERSION) =
  ($ENV{YGG_USER}, $ENV{YGG_PASSWORD}, $ENV{YGG_HOST}, $ENV{YGG_PORT}, $ENV{YGG_DB}, $ENV{YGG_ENGINE}, undef, 'Ygg', '0.01');

GetOptions(
    "mapper=s"     => \$mapper,
    "user=s"       => \$user,
    "engine=s"     => \$engine,
    "password=s"   => \$password,
    "host=s"       => \$host,
    "database=s"   => \$db,
    "engine=s"     => \$engine,
    "port=s"       => \$port,
    "help"         => \&help,
    "version"      => \&version,
    );

new Yggdrasil(
	      user      => $user,
	      password  => $password,
	      host      => $host,
	      port      => $port,
	      db        => $db,
	      engine    => $engine,
	      mapper    => $mapper,
	      namespace => $NAMESPACE,
	      admin     => 1,
	     );

my $store = {
    MetaEntity   => \&meta_entity,
    MetaProperty => \&meta_property,
    MetaRelation => \&meta_relation,
    MetaInheritance => \&meta_inheritance,
    Entity   => \&entity,
    Property => \&property,
    Relation => \&relation,
};

my $define = {
    MetaEntity   => sub {},
    MetaProperty => sub {},
    MetaRelation => sub {},
    MetaInheritance => sub {},
    Entity   => sub{},
    Property => \&property_define,
    Relation => sub{},
};


my( @data, $section, $extra );
while( my $line = <>) {
    next if $line =~ /^#/;
    if( $line eq "\n" ) {
	$store->{ $section }->( $extra, \@data ) if @data;
	@data = ();
	next;
    } elsif( $line =~ /^\[/ ) {
	my($header) = $line =~ /\[([^]]+)\]/;
	( $section, $extra ) = split(":", $header);
	$define->{ $section }->( $extra );
	next;
    }

    die unless $section;

    push( @data, $line );
}

sub meta_entity {
    my $schema = shift;
    my %data = decode(shift);

    my $id = Yggdrasil::MetaEntity->admin_restore( \%data );
    $ENTITY_MAP{ $data{entity} } = $id;
}

sub meta_property {
    my $schema = shift;
    my %data = decode(shift);

    $data{entity} = $ENTITY_MAP{ $data{entity} };
    Yggdrasil::MetaProperty->admin_restore( \%data );
}

sub meta_relation {
    my $schema = shift;
    my %data = decode(shift);

    $data{lval} = $ENTITY_MAP{ $data{lval} };
    $data{rval} = $ENTITY_MAP{ $data{rval} };
    my $id = Yggdrasil::MetaRelation->admin_restore( \%data );
    $RELATION_MAP{ $data{label} } = $id;
}

sub meta_inheritance {
    my $schema = shift;
    my %data = decode(shift);

    $data{parent} = $ENTITY_MAP{ $data{parent} };
    $data{child}  = $ENTITY_MAP{ $data{child} };
    Yggdrasil::MetaInheritance->admin_restore( \%data );
}

sub entity {
    my $entity = decode_base64( shift );
    my %data   = decode(shift);

    $data{entity} = $ENTITY_MAP{ $entity };
    my $id = Yggdrasil::Entity->admin_restore( \%data );
    $INSTANCE_MAP{ $data{visual_id} } = $id;
}

sub property {
    my $schema = shift;
    my( $entity, $property ) = map { decode_base64($_) } split ' ', $schema;
    my %data = decode(shift);
    
    $data{id} = $INSTANCE_MAP{ $data{id} };
    Yggdrasil::Property->admin_restore( $entity, $property, \%data );
}

sub property_define {
    my $schema = shift;
    my( $entity, $property ) = map { decode_base64($_) } split ' ', $schema;

    Yggdrasil::Property->admin_define( $entity, $property );    
}

sub relation {
    my $label = decode_base64( shift );
    my %data = decode(shift);
    
    $data{lval} = $INSTANCE_MAP{ $data{lval} };
    $data{rval} = $INSTANCE_MAP{ $data{rval} };
    $data{id}   = $RELATION_MAP{ $label };
    Yggdrasil::Relation->admin_restore( \%data );
}


sub decode {
    my $data = shift;

    my @list;
    foreach my $l (@$data) {
	my( $key, $val ) = split /\s+=>\s+/, $l;
	$val = decode_base64($val);
	$val = undef unless length $val;

	push( @list, $key, $val );
    }

    return @list;
}

sub help {
    print <<USAGE;
Usage: $0 <dump file>

Restores an Yggdrasil database from a dump file. Dump files can be
generated with ydump.

USAGE

    print <DATA>;
    exit;
}

sub version {
    print "yrestore version $VERSION\n";
    exit;
}

__DATA__
Options:
--------
--help               Prints out usage help
--version            Prints version information
--user <name>        Specify database login name
--password <pass>    Specify database password
--host <host>        Specify database host
--port <port>        Specify database port
--db <name>          Specify database name
--engine <name>      Specify database engine
--namespace <space>  Specify Yggdrasil namespace
