* MetaInheritance, build proper support for inheritance.

* Provide a larger test suite.

* Transactions.  Implement engine transactions on top of what storage
  provides, and at the same time control access.  The engine log needs
  to be under lock and key.

* Historic information.

  Make current implementation prettier!

  Handle date formats much much better. 

  We might wish to pre-populate the data, it's not current, so there
   is no real reason to ask the database after the initial get.  We
   could set the keys in the objects returned, in essence dumping a
   load of data on userland and saying "here, do what you like with
   this".  We also don't support writing to this data.

* Correction of old data?  What if data has been wrong for a while,
   only in the database though, not in the real world.  It'd show up
   on historic overview as a change today, even if it maybe
   shouldn't.  Tagging updates?

* Caching of properties, it might be a good idea to facilitate a slurp
   of several properties at once to save selects to the database, and
   cache these values for a short time.  Otherwise, just return them
   into a hash or something, to make large-scale property dumps less
   select heavy.

* Handle SET's in _check_valid_types() in Storage.pm
  Eg. SET( VARCHAR(12) )

* If temporal=1, then (currently) the SQL engines use "start" and
  "stop" as fieldnames. That means "start" and "stop" are reserved
  keywords, and a check that the user hasn't requested a field with
  those names. (Or other reserved keywords ... are there any?)

* exists / property_exists need to check what time they're being
   checked for, right now they just check current existence.

* Relations need to support constraints and labels.
  $y->define_relation( $e1, $e2, as => 'mylabel' );
  $y->bind( $person1, $person2,
                       as    => 'Parent',
                       where => 'a.birthdate < b.birthdate');

* Fix relations within the same entity.
  See above, $p to $p
  This will also check that $parent.birthdate < $child.birthdate due
  to the constraint.

* Define a proper syntax for constraints.

* Make the web interface support editing.

* Redefine of properties
  What happens if you decide to change the meta information of a
  property?  If once, NULL was allowed, but now isn't anymore?  This
  isn't supported at all at the moment (you can't change meta
  information in any way).

* Inhertited relations, what happens when relations are broken?  Do the
  active relations expire?  

* Overloading properties?  NO, we need to ensure that types are
  propagated correctly throughout the inheritance tree so it's
  possible to treat instances of any subclass as the parent class.

* Return values from expire / _expire...
